package com.appreservas.appreservas.public_.sala.generated;

import com.appreservas.appreservas.public_.sala.Sala;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;

import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.appreservas.appreservas.public_.sala.Sala}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedSalaImpl implements Sala {
    
    private int salaid;
    private String nome;
    private String localizaO;
    private boolean luagresmarcados;
    private Integer lotacao;
    
    protected GeneratedSalaImpl() {}
    
    @Override
    public int getSalaid() {
        return salaid;
    }
    
    @Override
    public Optional<String> getNome() {
        return Optional.ofNullable(nome);
    }
    
    @Override
    public Optional<String> getLocalizaO() {
        return Optional.ofNullable(localizaO);
    }
    
    @Override
    public boolean getLuagresmarcados() {
        return luagresmarcados;
    }
    
    @Override
    public OptionalInt getLotacao() {
        return OptionalUtil.ofNullable(lotacao);
    }
    
    @Override
    public Sala setSalaid(int salaid) {
        this.salaid = salaid;
        return this;
    }
    
    @Override
    public Sala setNome(String nome) {
        this.nome = nome;
        return this;
    }
    
    @Override
    public Sala setLocalizaO(String localizaO) {
        this.localizaO = localizaO;
        return this;
    }
    
    @Override
    public Sala setLuagresmarcados(boolean luagresmarcados) {
        this.luagresmarcados = luagresmarcados;
        return this;
    }
    
    @Override
    public Sala setLotacao(Integer lotacao) {
        this.lotacao = lotacao;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("salaid = "          + Objects.toString(getSalaid()));
        sj.add("nome = "            + Objects.toString(OptionalUtil.unwrap(getNome())));
        sj.add("localizaO = "       + Objects.toString(OptionalUtil.unwrap(getLocalizaO())));
        sj.add("luagresmarcados = " + Objects.toString(getLuagresmarcados()));
        sj.add("lotacao = "         + Objects.toString(OptionalUtil.unwrap(getLotacao())));
        return "SalaImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Sala)) { return false; }
        final Sala thatSala = (Sala)that;
        if (this.getSalaid() != thatSala.getSalaid()) { return false; }
        if (!Objects.equals(this.getNome(), thatSala.getNome())) { return false; }
        if (!Objects.equals(this.getLocalizaO(), thatSala.getLocalizaO())) { return false; }
        if (this.getLuagresmarcados() != thatSala.getLuagresmarcados()) { return false; }
        if (!Objects.equals(this.getLotacao(), thatSala.getLotacao())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getSalaid());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getNome()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getLocalizaO()));
        hash = 31 * hash + Boolean.hashCode(getLuagresmarcados());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getLotacao()));
        return hash;
    }
}