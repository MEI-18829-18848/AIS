package com.company.public_.generated;

import com.company.public_.Public_Application;
import com.company.public_.Public_ApplicationBuilder;
import com.company.public_.appreservas.public_.cliente.ClienteManager;
import com.company.public_.appreservas.public_.evento.EventoManager;
import com.company.public_.appreservas.public_.lugar.LugarManager;
import com.company.public_.appreservas.public_.organizador.OrganizadorManager;
import com.company.public_.appreservas.public_.reserva.ReservaManager;
import com.company.public_.appreservas.public_.reservalugar.ReservalugarManager;
import com.company.public_.appreservas.public_.sala.SalaManager;
import com.company.public_.appreservas.public_.sessao.SessaoManager;
import com.company.public_.appreservas.public_.utilizador.UtilizadorManager;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.plugins.json.JsonBundle;
import com.speedment.enterprise.plugins.json.JsonComponent;
import com.speedment.runtime.core.ApplicationBuilder;
import com.speedment.runtime.core.component.ProjectComponent;
import com.speedment.runtime.join.JoinBundle;
import com.speedment.runtime.join.JoinComponent;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.core.env.Environment;

/**
 * The spring configuration file
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public class GeneratedPublic_Configuration {
    
    protected static final String URL_PROPERTY = "spring.speedment.url";
    protected static final String HOST_PROPERTY = "spring.speedment.host";
    protected static final String PORT_PROPERTY = "spring.speedment.port";
    protected static final String USERNAME_PROPERTY = "spring.speedment.username";
    protected static final String PASSWORD_PROPERTY = "spring.speedment.password";
    protected static final String LICENSE_PROPERTY = "spring.speedment.license";
    protected static final String LOGGING_PROPERTY = "spring.speedment.logging";
    protected @Autowired Environment env;
    
    @Bean
    public Public_Application getApplication() {
        return getApplicationBuilder().build();
    }
    
    public Public_ApplicationBuilder getApplicationBuilder() {
        final Public_ApplicationBuilder builder =
            new Public_ApplicationBuilder()
                .withBundle(JsonBundle.class)
                .withBundle(JoinBundle.class);
        
        if (env.containsProperty(URL_PROPERTY)) {
            builder.withConnectionUrl(env.getProperty(URL_PROPERTY));
        }
        
        if (env.containsProperty(HOST_PROPERTY)) {
            builder.withIpAddress(env.getProperty(HOST_PROPERTY));
        }
        
        if (env.containsProperty(PORT_PROPERTY)) {
            builder.withPort(Integer.parseInt(env.getProperty(PORT_PROPERTY)));
        }
        
        if (env.containsProperty(USERNAME_PROPERTY)) {
            builder.withUsername(env.getProperty(USERNAME_PROPERTY));
        }
        
        if (env.containsProperty(PASSWORD_PROPERTY)) {
            builder.withPassword(env.getProperty(PASSWORD_PROPERTY));
        }
        
        if (env.containsProperty(LICENSE_PROPERTY)) {
            builder.withParam("licenseKey", env.getProperty(LICENSE_PROPERTY));
        }
        
        if (env.containsProperty(LOGGING_PROPERTY)
        &&  Boolean.valueOf(env.getProperty(LOGGING_PROPERTY))) {
            builder
                .withLogging(ApplicationBuilder.LogType.STREAM)
                .withLogging(ApplicationBuilder.LogType.APPLICATION_BUILDER)
                .withLogging(ApplicationBuilder.LogType.CONNECTION)
                .withLogging(ApplicationBuilder.LogType.STREAM_OPTIMIZER);
        }
        
        return builder;
    }
    
    @Bean
    public ProjectComponent getProjectComponent(Public_Application app) {
        return app.getOrThrow(ProjectComponent.class);
    }
    
    @Bean
    public JsonComponent getJsonComponent(Public_Application app) {
        return app.getOrThrow(JsonComponent.class);
    }
    
    @Bean
    public JoinComponent getJoinComponent(Public_Application app) {
        return app.getOrThrow(JoinComponent.class);
    }
    
    @Bean
    public ClienteManager getClienteManager(Public_Application app) {
        return app.getOrThrow(ClienteManager.class);
    }
    
    @Bean
    public EventoManager getEventoManager(Public_Application app) {
        return app.getOrThrow(EventoManager.class);
    }
    
    @Bean
    public LugarManager getLugarManager(Public_Application app) {
        return app.getOrThrow(LugarManager.class);
    }
    
    @Bean
    public OrganizadorManager getOrganizadorManager(Public_Application app) {
        return app.getOrThrow(OrganizadorManager.class);
    }
    
    @Bean
    public ReservaManager getReservaManager(Public_Application app) {
        return app.getOrThrow(ReservaManager.class);
    }
    
    @Bean
    public ReservalugarManager getReservalugarManager(Public_Application app) {
        return app.getOrThrow(ReservalugarManager.class);
    }
    
    @Bean
    public SalaManager getSalaManager(Public_Application app) {
        return app.getOrThrow(SalaManager.class);
    }
    
    @Bean
    public SessaoManager getSessaoManager(Public_Application app) {
        return app.getOrThrow(SessaoManager.class);
    }
    
    @Bean
    public UtilizadorManager getUtilizadorManager(Public_Application app) {
        return app.getOrThrow(UtilizadorManager.class);
    }
}